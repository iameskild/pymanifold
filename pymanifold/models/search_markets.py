# generated by datamodel-codegen:
#   filename:  search-markets.json
#   timestamp: 2025-02-16T19:07:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import BaseModel, ConfigDict, RootModel, confloat, constr


class Filter(Enum):
    open = "open"
    closing_90_days = "closing-90-days"
    closing_week = "closing-week"
    closing_month = "closing-month"
    closed = "closed"
    resolved = "resolved"
    all = "all"


class Sort(Enum):
    newest = "newest"
    score = "score"
    daily_score = "daily-score"
    freshness_score = "freshness-score"
    field_24_hour_vol = "24-hour-vol"
    most_popular = "most-popular"
    liquidity = "liquidity"
    subsidy = "subsidy"
    last_updated = "last-updated"
    close_date = "close-date"
    resolve_date = "resolve-date"
    random = "random"
    bounty_amount = "bounty-amount"
    prob_descending = "prob-descending"
    prob_ascending = "prob-ascending"


class ContractType(Enum):
    ALL = "ALL"
    BINARY = "BINARY"
    MULTIPLE_CHOICE = "MULTIPLE_CHOICE"
    FREE_RESPONSE = "FREE_RESPONSE"
    PSEUDO_NUMERIC = "PSEUDO_NUMERIC"
    BOUNTIED_QUESTION = "BOUNTIED_QUESTION"
    STONK = "STONK"
    POLL = "POLL"
    NUMBER = "NUMBER"


class ForYou(Enum):
    field_1 = "1"
    field_0 = "0"


class IsPrizeMarket(Enum):
    true = "true"
    false = "false"
    field_1 = "1"
    field_0 = "0"


class Token(Enum):
    MANA = "MANA"
    CASH = "CASH"
    ALL = "ALL"


class SearchMarkets(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    term: Optional[str] = None
    filter: Optional[Filter] = "all"
    sort: Optional[Sort] = "most-popular"
    contractType: Optional[ContractType] = "ALL"
    offset: Optional[confloat(ge=0.0)] = 0
    limit: Optional[confloat(le=1000.0, gt=0.0)] = 100
    topicSlug: Optional[constr(pattern=r"^[a-zA-Z0-9_-]{1,}$")] = None
    forYou: Optional[ForYou] = "0"
    creatorId: Optional[constr(pattern=r"^[a-zA-Z0-9_-]{1,}$")] = None
    isPrizeMarket: Optional[IsPrizeMarket] = "0"
    marketTier: Optional[constr(pattern=r"^[01]{5}$")] = "00000"
    token: Optional[Token] = "ALL"
    gids: Optional[str] = None


class Model(RootModel[SearchMarkets]):
    root: SearchMarkets
