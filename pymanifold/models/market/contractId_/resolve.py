# generated by datamodel-codegen:
#   filename:  resolve.json
#   timestamp: 2025-02-16T19:07:36+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional

from pydantic import BaseModel, ConfigDict, RootModel, confloat


class Outcome(Enum):
    YES = "YES"
    NO = "NO"
    MKT = "MKT"
    CANCEL = "CANCEL"


class MarketContractIdResolve1(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    outcome: Outcome
    probabilityInt: Optional[confloat(ge=0.0, le=100.0)] = None
    answerId: Optional[str] = None


class MarketContractIdResolve2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcome: Literal["CANCEL"]


class MarketContractIdResolve3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcome: Literal["CHOOSE_ONE"]
    answerId: str


class Resolution(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    answerId: str
    pct: confloat(ge=0.0, le=100.0)


class MarketContractIdResolve4(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcome: Literal["CHOOSE_MULTIPLE"]
    resolutions: List[Resolution]


class MarketContractIdResolve5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcome: Literal["CANCEL"]


class MarketContractIdResolve6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcome: Literal["MKT"]
    value: float
    probabilityInt: confloat(ge=0.0, le=100.0)


class MarketContractIdResolve7(BaseModel):
    contractId: str


class MarketContractIdResolve8(MarketContractIdResolve1, MarketContractIdResolve7):
    pass


class MarketContractIdResolve(RootModel[MarketContractIdResolve8]):
    root: MarketContractIdResolve8


class Model(RootModel[MarketContractIdResolve]):
    root: MarketContractIdResolve
