# generated by datamodel-codegen:
#   filename:  market.json
#   timestamp: 2025-02-16T19:07:31+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    PositiveFloat,
    RootModel,
    confloat,
    constr,
)


class Mark(BaseModel):
    type: str
    attrs: Optional[Dict[str, Any]] = None


class OutcomeType(Enum):
    BINARY = "BINARY"
    MULTIPLE_CHOICE = "MULTIPLE_CHOICE"
    PSEUDO_NUMERIC = "PSEUDO_NUMERIC"
    STONK = "STONK"
    BOUNTIED_QUESTION = "BOUNTIED_QUESTION"
    POLL = "POLL"
    NUMBER = "NUMBER"


class Visibility(Enum):
    public = "public"
    unlisted = "unlisted"


class MarketTier(Enum):
    play = "play"
    plus = "plus"
    premium = "premium"
    crystal = "crystal"


class OutcomeType1(Enum):
    MULTIPLE_CHOICE = "MULTIPLE_CHOICE"


class Answer(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class AddAnswersMode(Enum):
    DISABLED = "DISABLED"
    ONLY_CREATOR = "ONLY_CREATOR"
    ANYONE = "ANYONE"


class Market1(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcomeType: OutcomeType1
    answers: List[Answer] = Field(..., max_length=100)
    addAnswersMode: Optional[AddAnswersMode] = "DISABLED"
    shouldAnswersSumToOne: Optional[bool] = None
    extraLiquidity: Optional[confloat(ge=1.0)] = None


class OutcomeType2(Enum):
    PSEUDO_NUMERIC = "PSEUDO_NUMERIC"


class Market2(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcomeType: OutcomeType2
    min: confloat(ge=-9007199254740991.0, le=9007199254740991.0)
    max: confloat(ge=-9007199254740991.0, le=9007199254740991.0)
    initialValue: confloat(ge=-9007199254740991.0, le=9007199254740991.0)
    isLogScale: Optional[bool] = None
    extraLiquidity: Optional[confloat(ge=1.0)] = None


class OutcomeType3(Enum):
    BOUNTIED_QUESTION = "BOUNTIED_QUESTION"


class Market3(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcomeType: OutcomeType3
    totalBounty: confloat(ge=1000.0)
    isAutoBounty: Optional[bool] = None


class OutcomeType4(Enum):
    POLL = "POLL"


class Market4(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcomeType: OutcomeType4
    answers: List[Answer] = Field(..., max_length=100, min_length=2)


class OutcomeType5(Enum):
    BINARY = "BINARY"
    STONK = "STONK"


class Market5(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcomeType: OutcomeType5
    initialProb: Optional[confloat(ge=1.0, le=99.0)] = None
    extraLiquidity: Optional[confloat(ge=1.0)] = None


class OutcomeType6(Enum):
    NUMBER = "NUMBER"


class Market6(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    outcomeType: OutcomeType6
    min: confloat(ge=-9007199254740991.0, le=9007199254740991.0)
    max: confloat(ge=-9007199254740991.0, le=9007199254740991.0)
    precision: PositiveFloat


class Field0(BaseModel):
    type: Optional[str] = None
    attrs: Optional[Dict[str, Any]] = None
    content: Optional[List[Field0]] = None
    marks: Optional[List[Mark]] = None
    text: Optional[str] = None


class Description(BaseModel):
    type: Optional[str] = None
    attrs: Optional[Dict[str, Any]] = None
    content: Optional[List[Field0]] = None
    marks: Optional[List[Mark]] = None
    text: Optional[str] = None


class Market7(BaseModel):
    question: constr(min_length=1, max_length=120)
    description: Optional[Union[Description, str]] = None
    descriptionHtml: Optional[str] = None
    descriptionMarkdown: Optional[str] = None
    descriptionJson: Optional[str] = None
    closeTime: Optional[Union[datetime, float]] = None
    outcomeType: OutcomeType
    groupIds: Optional[List[constr(min_length=1, max_length=60)]] = None
    visibility: Optional[Visibility] = "public"
    isTwitchContract: Optional[bool] = None
    utcOffset: Optional[float] = None
    marketTier: Optional[MarketTier] = None
    idempotencyKey: Optional[
        constr(
            pattern=r"^[useandom26T198340PX75pxJACKVERYMINDBUSHWOLFGQZbfghjklqvwyzrict]+$",
            min_length=10,
            max_length=10,
        )
    ] = None


class Market8(Market1, Market7):
    pass


class Market9(Market2, Market7):
    pass


class Market10(Market3, Market7):
    pass


class Market11(Market4, Market7):
    pass


class Market12(Market5, Market7):
    pass


class Market13(Market6, Market7):
    pass


class Market(
    RootModel[Union[Market8, Market9, Market10, Market11, Market12, Market13]]
):
    root: Union[Market8, Market9, Market10, Market11, Market12, Market13]


class Model(RootModel[Market]):
    root: Market


Field0.model_rebuild()
